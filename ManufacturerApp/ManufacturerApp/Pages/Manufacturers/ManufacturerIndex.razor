@page "/Manufacturers"

@inject IManufacturerRepository repository
@inject IJSRuntime JS

<h3>Manufacturer List</h3>

<p>고객사 리스트를 출력</p>

@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacturer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
            <tr>
                <td>@manufacturer.Id</td>
                <td>@manufacturer.Name</td>
                <td>@manufacturer.ManufacturerCode</td>
                <td>@manufacturer.Comment</td>
                <td>
                    <input type="button" value="Edit" class="btn btn-primary" />
                </td>
                <td>
                    <input type="button" value="Delete" class="btn btn-danger" 
                        data-toggle="modal" data-target="#manufacturerDeleteDialog"
                        @onclick="(() => DeleteBy(manufacturer))"  
                    />
                </td>
            </tr>
            }
        </tbody>
    </table>
}


    <ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>    


@code {

    List<Manufacturer> manufacturers;

    Manufacturer manufacturer = new Manufacturer();

    protected override async Task OnInitializedAsync()
    {
        manufacturers = await repository.GetManufacturers();
    }

    protected async Task btnDelete_Click()
    {
        await repository.DeleteManufacturer(manufacturer.Id); // 삭제 
        await JS.InvokeAsync<object>("closeModal", "manufacturerDeleteDialog");
        manufacturers = await repository.GetManufacturers(); // 다시 읽어오기
        manufacturer = new Manufacturer(); // 선택 항목 초기화 
    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }
}

