@page "/Manufacturers"

@inject IManufacturerRepository repository
@inject IJSRuntime JS

<h3>Manufacturer List</h3>

<p>고객사 리스트를 출력</p>

@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacturer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
            <tr>
                <td>@manufacturer.Id</td>
                <td>@manufacturer.Name</td>
                <td>@manufacturer.ManufacturerCode</td>
                <td>@manufacturer.Comment</td>
                <td>
                    <input type="button" value="Edit" class="btn btn-primary" 
                        data-toggle="modal" data-target="#manufacturerEditorDialog" 
                        @onclick="(() => EditBy(manufacturer))"
                    />
                </td>
                <td>
                    <input type="button" value="Delete" class="btn btn-danger" 
                        data-toggle="modal" data-target="#manufacturerDeleteDialog"
                        @onclick="(() => DeleteBy(manufacturer))"  
                    />
                </td>
            </tr>
            }
        </tbody>
    </table>
}

<div>
    <input type="button" value="등록" data-toggle="modal" 
        data-target="#manufacturerEditorDialog" class="btn btn-primary" 
        @onclick="(() => btnCreate_Click())"
    />
</div>

<ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>    

<ManufacturerEditorForm EditorModel="@manufacturer" SaveOrUpdated="@SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ManufacturerEditorForm>



@code {
    private string editorFormTitle = "";
    private List<Manufacturer> manufacturers;

    private Manufacturer manufacturer = new Manufacturer();

    protected override async Task OnInitializedAsync()
    {
        manufacturers = await repository.GetManufacturers();
    }

    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        manufacturer = new Manufacturer();
    }

    protected async Task btnDelete_Click()
    {
        await repository.DeleteManufacturer(manufacturer.Id); // 삭제 
        await JS.InvokeAsync<object>("closeModal", "manufacturerDeleteDialog");
        manufacturers = await repository.GetManufacturers(); // 다시 읽어오기
        manufacturer = new Manufacturer(); // 선택 항목 초기화 
    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }

    private void EditBy(Manufacturer manu)
    {
        editorFormTitle = "수정하기";
        manufacturer = manu;
    }

    // 등록 또는 수정 후 현재 페이지 다시 Load
    private async void SaveOrUpdated()
    {
        manufacturers = await repository.GetManufacturers(); // 다시 읽어오기
        StateHasChanged();
    }
}

